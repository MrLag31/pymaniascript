import os
import argparse
from pymaniascript.ast.report import FATAL_ERROR, ERROR, WARNING

parser = argparse.ArgumentParser(prog='\n  python -m pymaniascript.compiler',
                                 formatter_class=argparse.RawDescriptionHelpFormatter,
                                 description='description:\n  Computes and prints the abstract syntax tree (AST) of a maniascript script.',
                                 epilog='Due to how the game handles file includes, the script needed to be compiled must be in a \'/Scripts\' folder.\nWhen handling big scripts, it is preferable to redirect the output to a file:\n  python -m pymaniascript.compiler [-ew] scriptfile > ast')

parser.add_argument('scriptfile'    , help='Path to your script')
parser.add_argument('-e', help='Also prints errors generated by the AST', action='store_true', dest='errors')
parser.add_argument('-w', help='Also prints warnings generated by the AST (forces -e)', action='store_true', dest='warnings')
args = parser.parse_args()

filepath = args.scriptfile
warnings = args.warnings
errors = args.errors or warnings

full_filepath = os.path.abspath(filepath)

if not os.path.isfile(full_filepath):
    print('You must provide a file!')
    exit()

head, tail = full_filepath, ''
tail_stack = []
    
while tail != 'Scripts':
    head, tail = os.path.split(head)
    tail_stack.append(tail)
    if tail == '': break

if tail == '':
    print('Folder \'Scripts\' not found in hierarchy.')
    exit()

else:
    from . import compile
    
    root_folder = os.path.join(head, 'Scripts')
    filepath = os.path.join(*tail_stack[-2::-1])
    
    root = compile(filepath, root_folder)
    
    print(root, end='')
    
    if errors or warnings:
        reports_to_print = [report for report in root.reports if (report.level in [ERROR, FATAL_ERROR] and errors) or (report.level == WARNING and warnings)]
        print('\n')
        print(*reports_to_print, sep='\n', end='')